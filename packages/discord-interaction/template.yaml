AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless-discord-bot
  A Serverless Discord Bot template built with Discord Slash Commands and AWS SAM.

Globals:
  Function:
    Runtime: nodejs14.x
    # Must return response for slash commands in 3 secs, but after the response
    # the lambda can keep running to do stuff that's missing
    Timeout: 15

Resources:
  #EventBridgeBus:
  #  Type: AWS::Events::EventBus
  #  Properties:
  #    Name: discord-bus

  CommandsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./src/commands_layer

  CreateCommandsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/create_commands
      Description: "Function to create Discord Slash Commands"
      Handler: index.lambdaHandler
      Environment:
        Variables:
          DISCORD_APP_ID: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:app_id}}'
          DISCORD_PUBLIC_KEY: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:public_key}}'
          DISCORD_BOT_TOKEN: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:bot_token}}'
          DISCORD_SERVER_ID: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:server_id}}'
          DISCORD_OWNER_ROLE_ID: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:owner_role_id}}'
          DISCORD_INVESTOR_ROLE_ID: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:investor_role_id}}'
          JWT_SECRET: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:jwt_secret}}'
          VAULT_ADDRESS: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:vault_address}}'
          ENZYME_API_ENDPOINT: !ImportValue 'EnzymeInteractionApi'
      Layers:
        - !Ref CommandsLayer

  CreateCommandsInvoker:
    Type: Custom::CreateCommandsInvoker
    Properties:
      ServiceToken: !GetAtt CreateCommandsFunction.Arn
      # Passing the CommandsLayer ARN will cause a custom resource update every time the commands are updated.
      # (note that the ARN of a LayerVersion Resource ends with an incrementing layer version number)
      CommandsLayerVersion: !Ref CommandsLayer

  DiscordInteractionApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: dev

  DiscordHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/command_handler
      Description: "Serverless Function to handle incoming Discord requests"
      Handler: index.lambdaHandler
      # This Lambda will send the poll message and schedule the counting
      Policies:
        - LambdaInvokePolicy: 
            FunctionName: !Ref DiscordPollStartFunction
      Events:
        EthAuth:
          Type: HttpApi
          Properties:
            ApiId: !Ref DiscordInteractionApi
            Method: post
            Path: /event
      Environment:
        Variables:
          DISCORD_APP_ID: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:app_id}}'
          DISCORD_PUBLIC_KEY: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:public_key}}'
          DISCORD_BOT_TOKEN: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:bot_token}}'
          DISCORD_SERVER_ID: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:server_id}}'
          DISCORD_CHANNEL_ID: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:channel_id}}'
          DISCORD_OWNER_ROLE_ID: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:owner_role_id}}'
          DISCORD_INVESTOR_ROLE_ID: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:investor_role_id}}'
          JWT_SECRET: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:jwt_secret}}'
          VAULT_ADDRESS: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:vault_address}}'
          ENZYME_API_ENDPOINT: !ImportValue 'EnzymeInteractionApi'
      Layers:
        - !Ref CommandsLayer

  DiscordRoleAssignFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: discord-role-assign
      CodeUri: ./src/role_assignment
      Description: "Serverless Function to set the role of a given user on Discord"
      Handler: index.lambdaHandler
      Environment:
        Variables:
          DISCORD_BOT_TOKEN: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:bot_token}}'
          DISCORD_SERVER_ID: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:server_id}}'
          DISCORD_CHANNEL_ID: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:channel_id}}'
        
  DiscordPollStartFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: discord-poll-start
      CodeUri: ./src/polls
      Description: "Serverless Function to start a poll on Discord and schedule the function to do the counting of the votes."
      Handler: index.startPoll
      Policies:
      - Statement:
        - Sid: EventBridgePutRulePolicy
          Effect: Allow
          Action:
            - events:PutRule
            - events:PutTargets
          Resource: 
            #- !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"
            # Didn't check if it's possible to use regex for resource names in policies. 
            # If it is, would be best to allow only the rules with names started with `poll-results-rule-` 
            # (the rest of the name is a dynamic id based on timestamp)
            - !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*"
        - Sid: LambdaAddPermissionPolicy
          Effect: Allow
          Action:
            - lambda:AddPermission
          Resource:
            - !GetAtt DiscordPollResolveFunction.Arn
      Environment:
        Variables:
          DISCORD_BOT_TOKEN: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:bot_token}}'
          DISCORD_POLL_RESOLVE_FUNCTION_ARN: !GetAtt DiscordPollResolveFunction.Arn

  DiscordPollResolveFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: discord-poll-resolve
      CodeUri: ./src/polls
      Description: >
        Serverless Function to count the votes in the poll initiated by `DiscordPollStartFunction`. 
        Once the votes are counted, the Enzyme Interaction API will be triggered to do an action according to the poll result.
      Handler: index.resolvePoll
      # TODO will need permission here to call enzyme-interaction API
      Policies:
      - Statement:
        - Sid: EventBridgeRemoveRulePolicy
          Effect: Allow
          Action:
            - events:DeleteRule
            - events:RemoveTargets
          Resource: 
            # Same as in `DiscordPollStartFunction`, would be best to define resource with regex
            - !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*"
        - Sid: LambdaRemovePermissionPolicy
          Effect: Allow
          Action:
            - lambda:RemovePermission
          Resource:
            # Doing it this way here because with !GetAtt for ARN it throws a circular dependency error
            - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:discord-poll-resolve"
        - Sid: DynamoAccessPolicy
          Effect: Allow
          Action:
            - dynamodb:Scan
          Resource:
            - !ImportValue 'dev-scaffold-eth-infra-TableArn'
        - Sid: LambdaInvokePolicy
          Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource: 
            - !ImportValue 'EnzymeExecuteTradeFunctionArn'
      Environment:
        Variables:
          DISCORD_BOT_TOKEN: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:bot_token}}'
          DISCORD_SERVER_ID: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:server_id}}'
          DISCORD_CHANNEL_ID: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:channel_id}}'
          DYNAMODB_TABLE: !ImportValue 'dev-scaffold-eth-infra-TableName'
          VAULT_ADDRESS: '{{resolve:secretsmanager:/dev/discord_dao_treasury_bot/discord:SecretString:vault_address}}'
          ENZYME_API_ENDPOINT: !ImportValue 'EnzymeInteractionApi'
          ENZYME_EXECUTE_TRADE_FUNCTION_ARN: !ImportValue 'EnzymeExecuteTradeFunctionArn'

Outputs:
  DiscordInteractionApi:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${DiscordInteractionApi}.execute-api.${AWS::Region}.amazonaws.com/dev/event"
  DiscordRoleAssignFnArn:
    Description: "The ARN of the lambda function that assigns the roles on discord. Used to call that function after successful authentication."
    Value: !GetAtt DiscordRoleAssignFunction.Arn
    Export:
      Name: DiscordRoleAssignFnArn
